version: v2beta1
name: syft

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev app                # 4. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"

vars:
  DEVSPACE_ENV_FILE: "default.env"

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  backend:
    image: "${CONTAINER_REGISTRY}${DOCKER_IMAGE_BACKEND}"
    buildKit: {}
    dockerfile: ./backend/backend.dockerfile
    context: ../
    tags:
      - "######"
      - "0.8.1-beta.9"
  # tailscale:
  #   image: "${CONTAINER_REGISTRY}${DOCKER_IMAGE_TAILSCALE}"
  #   buildKit: {}
  #   dockerfile: ./vpn/tailscale.dockerfile
  #   context: ./vpn
  #   tags:
  #     - "######"
  #     - "0.8.1-beta.9"

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  grid-stack-ingress:
    kubectl:
      manifests:
        - k8s/manifests/ingress.yaml

  traefik-main-config:
    kubectl:
      manifests:
        - "k8s/manifests/traefik-domain.yaml"

  proxy:
    helm:
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
      values:
        containers:
          - image: "${DOCKER_IMAGE_TRAEFIK}:${TRAEFIK_VERSION}"
            volumeMounts:
              - containerPath: /etc/traefik
                volume:
                  name: traefik-conf
            env:
              - name: SERVICE_NAME
                value: "proxy"
          - image: "${CONTAINER_REGISTRY}${DOCKER_IMAGE_TAILSCALE}"
            securityContext:
              capabilities:
                add: ["NET_ADMIN", "SYS_MODULE"]
              privileged: true
            env:
              - name: HOSTNAME
                value: "${NODE_NAME}"
              - name: STACK_API_KEY
                value: "changeme"
            volumeMounts:
              - containerPath: /var/lib/tailscale
                volume:
                  name: tailscale-data
                  subPath: /tailscale-data
                  readOnly: false
        volumes:
          - name: tailscale-data
            size: "100Mi"
          - name: traefik-conf
            configMap:
              name: traefik-main-config
        service:
          name: "proxy"
          ports:
            - name: proxy
              port: 80
            - name: api
              port: 4000

  backend:
    helm:
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
      values:
        containers:
          - image: "${CONTAINER_REGISTRY}${DOCKER_IMAGE_BACKEND}"
            volumeMounts:
              - containerPath: /storage
                volume:
                  name: credentials-data
                  subPath: /credentials-data
                  readOnly: false
            env:
              - name: MONGO_PORT
                value: "${MONGO_PORT}"
              - name: MONGO_HOST
                value: "${MONGO_HOST}"
              - name: MONGO_USERNAME
                value: "${MONGO_USERNAME}"
              - name: MONGO_PASSWORD
                value: "${MONGO_PASSWORD}"
              - name: SERVICE_NAME
                value: "backend"
              - name: RELEASE
                value: "${RELEASE}"
              - name: VERSION
                value: "${VERSION}"
              - name: VERSION_HASH
                value: "${VERSION_HASH}"
              - name: NODE_TYPE
                value: "${NODE_TYPE}"
              - name: NODE_NAME
                value: "${NODE_NAME}"
              - name: STACK_API_KEY
                value: "changeme"
              - name: PORT
                value: "${HTTP_PORT}"
              - name: IGNORE_TLS_ERRORS
                value: "${IGNORE_TLS_ERRORS}"
              - name: HTTP_PORT
                value: "${HTTP_PORT}"
              - name: HTTPS_PORT
                value: "${HTTPS_PORT}"
              - name: CONTAINER_HOST
                value: "${CONTAINER_HOST}"
              - name: TRACE
                value: "${TRACE}"
              - name: JAEGER_HOST
                value: "${JAEGER_HOST}"
              - name: JAEGER_PORT
                value: "${JAEGER_PORT}"
              - name: DEV_MODE
                value: "${DEV_MODE}"
              - name: DOMAIN_CONNECTION_PORT
                value: "${DOMAIN_CONNECTION_PORT}"
              - name: ENABLE_OBLV
                value: "${ENABLE_OBLV}"
              - name: DEFAULT_ROOT_EMAIL
                value: "${DEFAULT_ROOT_EMAIL}"
              - name: DEFAULT_ROOT_PASSWORD
                value: "${DEFAULT_ROOT_PASSWORD}"
              - name: BACKEND_STORAGE_PATH
                value: "/storage"
        volumes:
          - name: credentials-data
            size: "100Mi"
        service:
          ports:
            - port: "${HTTP_PORT}"
  mongo:
    helm:
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
      values:
        containers:
          - image: mongo:latest
            env:
              - name: MONGO_INITDB_ROOT_USERNAME
                value: "${MONGO_USERNAME}"
              - name: MONGO_INITDB_ROOT_PASSWORD
                value: "${MONGO_PASSWORD}"
            volumeMounts:
              - containerPath: /data/db
                volume:
                  name: mongo-data
                  subPath: /
                  readOnly: false
        volumes:
          - name: mongo-data
            size: "5Gi"
        service:
          ports:
            - port: "27017"

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  backend:
    # Search for the container that runs this image
    imageSelector: "${CONTAINER_REGISTRY}${DOCKER_IMAGE_BACKEND}"
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    # devImage: ghcr.io/loft-sh/devspace-containers/python:3-alpine
    # Sync files between the local filesystem and the development container
    sync:
      - path: ./backend/grid:/app/grid
      - path: ../syft:/app/syft
        # uploadExcludeFile: .dockerignore
    # Open a terminal and use the following command to start it
    # terminal:
    #   command: ./devspace_start.sh
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - gitCredentials: true
    # Forward the following ports to be able access your application via localhost
    # ports:
    #   - port: "80"
    # # Open the following URLs once they return an HTTP status code other than 502 or 503
    # open:
    #   - url: http://localhost:80
# Use the `commands` section to define repeatable dev workflows for this project
# commands:
#   migrate-db:
#     command: |-
#       echo 'This is a cross-platform, shared command that can be used to codify any kind of dev task.'
#       echo 'Anyone using this project can invoke it via "devspace run migrate-db"'

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)
